{"ast":null,"code":"// index.js (Backend Entry Point)\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport authRoutes from './routes/authRoutes.js';\nimport propertyRoutes from './routes/propertyRoutes.js';\nimport fileUpload from 'express-fileupload';\ndotenv.config();\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\napp.use(cors({\n  origin: ['http://localhost:3000', 'https://geoestate.in', 'https://your-netlify-site.netlify.app'],\n  credentials: true\n}));\napp.use(express.json());\napp.use(fileUpload({\n  useTempFiles: true\n}));\n\n// Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/properties', propertyRoutes);\n\n// Root\napp.get('/', (req, res) => {\n  res.send('üåê GeoEstate API is Running...');\n});\n\n// MongoDB Connection\nmongoose.connect(process.env.MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log('‚úÖ MongoDB Connected');\n  app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));\n}).catch(err => {\n  console.error('‚ùå MongoDB connection error:', err);\n});","map":{"version":3,"names":["express","mongoose","cors","dotenv","authRoutes","propertyRoutes","fileUpload","config","app","PORT","process","env","use","origin","credentials","json","useTempFiles","get","req","res","send","connect","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","console","log","listen","catch","err","error"],"sources":["D:/GeoEstateProjecttries/geoestate-frontend/src/index.js"],"sourcesContent":["// index.js (Backend Entry Point)\r\nimport express from 'express';\r\nimport mongoose from 'mongoose';\r\nimport cors from 'cors';\r\nimport dotenv from 'dotenv';\r\nimport authRoutes from './routes/authRoutes.js';\r\nimport propertyRoutes from './routes/propertyRoutes.js';\r\nimport fileUpload from 'express-fileupload';\r\n\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Middleware\r\napp.use(cors({\r\n  origin: ['http://localhost:3000', 'https://geoestate.in', 'https://your-netlify-site.netlify.app'],\r\n  credentials: true,\r\n}));\r\napp.use(express.json());\r\napp.use(fileUpload({ useTempFiles: true }));\r\n\r\n// Routes\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/properties', propertyRoutes);\r\n\r\n// Root\r\napp.get('/', (req, res) => {\r\n  res.send('üåê GeoEstate API is Running...');\r\n});\r\n\r\n// MongoDB Connection\r\nmongoose.connect(process.env.MONGO_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true\r\n})\r\n.then(() => {\r\n  console.log('‚úÖ MongoDB Connected');\r\n  app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));\r\n})\r\n.catch((err) => {\r\n  console.error('‚ùå MongoDB connection error:', err);\r\n});\r\n"],"mappings":"AAAA;AACA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,UAAU,MAAM,oBAAoB;AAE3CH,MAAM,CAACI,MAAM,CAAC,CAAC;AAEf,MAAMC,GAAG,GAAGR,OAAO,CAAC,CAAC;AACrB,MAAMS,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;;AAErC;AACAD,GAAG,CAACI,GAAG,CAACV,IAAI,CAAC;EACXW,MAAM,EAAE,CAAC,uBAAuB,EAAE,sBAAsB,EAAE,uCAAuC,CAAC;EAClGC,WAAW,EAAE;AACf,CAAC,CAAC,CAAC;AACHN,GAAG,CAACI,GAAG,CAACZ,OAAO,CAACe,IAAI,CAAC,CAAC,CAAC;AACvBP,GAAG,CAACI,GAAG,CAACN,UAAU,CAAC;EAAEU,YAAY,EAAE;AAAK,CAAC,CAAC,CAAC;;AAE3C;AACAR,GAAG,CAACI,GAAG,CAAC,WAAW,EAAER,UAAU,CAAC;AAChCI,GAAG,CAACI,GAAG,CAAC,iBAAiB,EAAEP,cAAc,CAAC;;AAE1C;AACAG,GAAG,CAACS,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACzBA,GAAG,CAACC,IAAI,CAAC,gCAAgC,CAAC;AAC5C,CAAC,CAAC;;AAEF;AACAnB,QAAQ,CAACoB,OAAO,CAACX,OAAO,CAACC,GAAG,CAACW,SAAS,EAAE;EACtCC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC,CACDC,IAAI,CAAC,MAAM;EACVC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EAClCnB,GAAG,CAACoB,MAAM,CAACnB,IAAI,EAAE,MAAMiB,OAAO,CAACC,GAAG,CAAC,6BAA6BlB,IAAI,EAAE,CAAC,CAAC;AAC1E,CAAC,CAAC,CACDoB,KAAK,CAAEC,GAAG,IAAK;EACdJ,OAAO,CAACK,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAAC;AACnD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}